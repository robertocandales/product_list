{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { ADD_ITEM_TO_ORDER, GET_PRODUCTS } from '../graphql/productQuery';\nimport { useOrder } from '../store/orderProvider';\nimport { useState } from 'react';\n\nconst useProductList = () => {\n  _s();\n\n  var _data$products$items, _data$products;\n\n  const {\n    addToOrder\n  } = useOrder();\n  const {\n    data = {\n      products: {\n        items: []\n      }\n    },\n    loading,\n    error\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      options: {\n        take: 20\n      }\n    }\n  });\n  const [addItemToOrder, {\n    loading: MutationLoading\n  }] = useMutation(ADD_ITEM_TO_ORDER, {\n    refetchQueries: [{\n      query: GET_PRODUCTS\n    }],\n    onCompleted: data => {\n      addToOrder(data === null || data === void 0 ? void 0 : data.addItemToOrder);\n    }\n  });\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleBuyClick = productId => {\n    addItemToOrder({\n      variables: {\n        productVariantId: productId,\n        quantity: 1\n      }\n    }).catch(error => {\n      console.log(error, 'error in addItemToOrder');\n      setSnackbarOpen(true);\n    });\n  };\n\n  return {\n    productsList: (_data$products$items = data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.items) !== null && _data$products$items !== void 0 ? _data$products$items : [],\n    loading,\n    error,\n    snackbarOpen,\n    handleBuyClick,\n    handleSnackbarClose,\n    MutationLoading\n  };\n};\n\n_s(useProductList, \"TF/oq6qsr0sWIfYWPQOCuh6DT7E=\", false, function () {\n  return [useOrder, useQuery, useMutation];\n});\n\nexport default useProductList;","map":{"version":3,"sources":["/Users/robertocandales/Documents/Santex/challenge/santex-fe-challenge-basic (1)/src/hooks/useProductList.ts"],"names":["useMutation","useQuery","ADD_ITEM_TO_ORDER","GET_PRODUCTS","useOrder","useState","useProductList","addToOrder","data","products","items","loading","error","variables","options","take","addItemToOrder","MutationLoading","refetchQueries","query","onCompleted","snackbarOpen","setSnackbarOpen","handleSnackbarClose","handleBuyClick","productId","productVariantId","quantity","catch","console","log","productsList"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AAEA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,yBAAhD;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAiBH,QAAQ,EAA/B;AAEA,QAAM;AACJI,IAAAA,IAAI,GAAG;AACLC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE;AADC;AADL,KADH;AAMJC,IAAAA,OANI;AAOJC,IAAAA;AAPI,MAQFX,QAAQ,CAAmBE,YAAnB,EAAiC;AAC3CU,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAX;AADgC,GAAjC,CARZ;AAWA,QAAM,CAACC,cAAD,EAAiB;AAAEL,IAAAA,OAAO,EAAEM;AAAX,GAAjB,IAAiDjB,WAAW,CAChEE,iBADgE,EAEhE;AACEgB,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAEhB;AADT,KADc,CADlB;AAMEiB,IAAAA,WAAW,EAAGZ,IAAD,IAAU;AACrBD,MAAAA,UAAU,CAACC,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEQ,cAAP,CAAV;AACD;AARH,GAFgE,CAAlE;AAcA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMkB,mBAAmB,GAAG,MAAM;AAChCD,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD;;AAIA,QAAME,cAAc,GAAIC,SAAD,IAAuB;AAC5CT,IAAAA,cAAc,CAAC;AACbH,MAAAA,SAAS,EAAE;AAAEa,QAAAA,gBAAgB,EAAED,SAApB;AAA+BE,QAAAA,QAAQ,EAAE;AAAzC;AADE,KAAD,CAAd,CAEGC,KAFH,CAEUhB,KAAD,IAAW;AAClBiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EAAmB,yBAAnB;AACAU,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KALD;AAMD,GAPD;;AAQA,SAAO;AACLS,IAAAA,YAAY,0BAAEvB,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAEC,QAAR,mDAAE,eAAgBC,KAAlB,uEAA2B,EADlC;AAELC,IAAAA,OAFK;AAGLC,IAAAA,KAHK;AAILS,IAAAA,YAJK;AAKLG,IAAAA,cALK;AAMLD,IAAAA,mBANK;AAOLN,IAAAA;AAPK,GAAP;AASD,CAnDD;;GAAMX,c;UACmBF,Q,EAUnBH,Q,EAGmDD,W;;;AAuCzD,eAAeM,cAAf","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport { ProductsResponse } from '../interfaces/products';\nimport { ADD_ITEM_TO_ORDER, GET_PRODUCTS } from '../graphql/productQuery';\nimport { useOrder } from '../store/orderProvider';\nimport { useState } from 'react';\n\nconst useProductList = () => {\n  const { addToOrder } = useOrder();\n\n  const {\n    data = {\n      products: {\n        items: [],\n      },\n    },\n    loading,\n    error,\n  } = useQuery<ProductsResponse>(GET_PRODUCTS, {\n    variables: { options: { take: 20 } },\n  });\n  const [addItemToOrder, { loading: MutationLoading }] = useMutation(\n    ADD_ITEM_TO_ORDER,\n    {\n      refetchQueries: [\n        {\n          query: GET_PRODUCTS,\n        },\n      ],\n      onCompleted: (data) => {\n        addToOrder(data?.addItemToOrder);\n      },\n    }\n  );\n\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleBuyClick = (productId: string) => {\n    addItemToOrder({\n      variables: { productVariantId: productId, quantity: 1 },\n    }).catch((error) => {\n      console.log(error, 'error in addItemToOrder');\n      setSnackbarOpen(true);\n    });\n  };\n  return {\n    productsList: data?.products?.items ?? [],\n    loading,\n    error,\n    snackbarOpen,\n    handleBuyClick,\n    handleSnackbarClose,\n    MutationLoading,\n  };\n};\n\nexport default useProductList;\n"]},"metadata":{},"sourceType":"module"}