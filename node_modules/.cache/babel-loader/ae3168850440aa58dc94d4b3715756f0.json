{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useOrder } from '../store/orderProvider';\nimport { useState } from 'react';\nimport { GET_PRODUCTS } from '../graphql/queries/getProductQuery';\nimport { ADD_ITEM_TO_ORDER } from '../graphql/mutation/addOrderMutation';\n\nconst useProductList = () => {\n  _s();\n\n  var _data$products, _data$products$items, _data$products2;\n\n  const {\n    addToOrder\n  } = useOrder();\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n  const {\n    data = {\n      products: {\n        totalItems: 0,\n        items: []\n      }\n    },\n    loading,\n    error\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      options: {\n        skip: (currentPage - 1) * itemsPerPage,\n        take: itemsPerPage\n      }\n    }\n  });\n  const [addItemToOrder, {\n    loading: MutationLoading\n  }] = useMutation(ADD_ITEM_TO_ORDER, {\n    refetchQueries: [{\n      query: GET_PRODUCTS\n    }],\n    onCompleted: data => {\n      addToOrder(data === null || data === void 0 ? void 0 : data.addItemToOrder);\n    }\n  });\n  const totalPages = Math.ceil((data === null || data === void 0 ? void 0 : (_data$products = data.products) === null || _data$products === void 0 ? void 0 : _data$products.totalItems) / itemsPerPage);\n\n  const handleChangePage = (event, page) => {\n    setCurrentPage(page);\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleBuyClick = productId => {\n    addItemToOrder({\n      variables: {\n        productVariantId: productId,\n        quantity: 1\n      }\n    }).catch(error => {\n      console.log(error, 'error in addItemToOrder');\n      setSnackbarOpen(true);\n    });\n  };\n\n  return {\n    productsList: (_data$products$items = data === null || data === void 0 ? void 0 : (_data$products2 = data.products) === null || _data$products2 === void 0 ? void 0 : _data$products2.items) !== null && _data$products$items !== void 0 ? _data$products$items : [],\n    loading,\n    error,\n    snackbarOpen,\n    handleBuyClick,\n    handleSnackbarClose,\n    MutationLoading,\n    currentPage,\n    itemsPerPage,\n    handleChangePage,\n    totalPages\n  };\n};\n\n_s(useProductList, \"LqMDd22vDPAJ2KJtKg4vGURegJM=\", false, function () {\n  return [useOrder, useQuery, useMutation];\n});\n\nexport default useProductList;","map":{"version":3,"sources":["/Users/robertocandales/Documents/Santex/challenge/santex-fe-challenge-basic (1)/src/hooks/useProductList.ts"],"names":["useMutation","useQuery","useOrder","useState","GET_PRODUCTS","ADD_ITEM_TO_ORDER","useProductList","addToOrder","snackbarOpen","setSnackbarOpen","currentPage","setCurrentPage","itemsPerPage","data","products","totalItems","items","loading","error","variables","options","skip","take","addItemToOrder","MutationLoading","refetchQueries","query","onCompleted","totalPages","Math","ceil","handleChangePage","event","page","handleSnackbarClose","handleBuyClick","productId","productVariantId","quantity","catch","console","log","productsList"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,iBAAT,QAAkC,sCAAlC;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,QAAQ,EAA/B;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMS,YAAY,GAAG,CAArB;AAEA,QAAM;AACJC,IAAAA,IAAI,GAAG;AACLC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,UAAU,EAAE,CADJ;AAERC,QAAAA,KAAK,EAAE;AAFC;AADL,KADH;AAOJC,IAAAA,OAPI;AAQJC,IAAAA;AARI,MASFjB,QAAQ,CAAmBG,YAAnB,EAAiC;AAC3Ce,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAACX,WAAW,GAAG,CAAf,IAAoBE,YAA5B;AAA0CU,QAAAA,IAAI,EAAEV;AAAhD;AADA;AADgC,GAAjC,CATZ;AAeA,QAAM,CAACW,cAAD,EAAiB;AAAEN,IAAAA,OAAO,EAAEO;AAAX,GAAjB,IAAiDxB,WAAW,CAChEK,iBADgE,EAEhE;AACEoB,IAAAA,cAAc,EAAE,CACd;AACEC,MAAAA,KAAK,EAAEtB;AADT,KADc,CADlB;AAMEuB,IAAAA,WAAW,EAAGd,IAAD,IAAU;AACrBN,MAAAA,UAAU,CAACM,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEU,cAAP,CAAV;AACD;AARH,GAFgE,CAAlE;AAcA,QAAMK,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,CAAAjB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,8BAAAA,IAAI,CAAEC,QAAN,kEAAgBC,UAAhB,IAA6BH,YAAvC,CAAnB;;AAEA,QAAMmB,gBAAgB,GAAG,CACvBC,KADuB,EAEvBC,IAFuB,KAGd;AACTtB,IAAAA,cAAc,CAACsB,IAAD,CAAd;AACD,GALD;;AAOA,QAAMC,mBAAmB,GAAG,MAAM;AAChCzB,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD;;AAIA,QAAM0B,cAAc,GAAIC,SAAD,IAAuB;AAC5Cb,IAAAA,cAAc,CAAC;AACbJ,MAAAA,SAAS,EAAE;AAAEkB,QAAAA,gBAAgB,EAAED,SAApB;AAA+BE,QAAAA,QAAQ,EAAE;AAAzC;AADE,KAAD,CAAd,CAEGC,KAFH,CAEUrB,KAAD,IAAW;AAClBsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ,EAAmB,yBAAnB;AACAT,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KALD;AAMD,GAPD;;AAQA,SAAO;AACLiC,IAAAA,YAAY,0BAAE7B,IAAF,aAAEA,IAAF,0CAAEA,IAAI,CAAEC,QAAR,oDAAE,gBAAgBE,KAAlB,uEAA2B,EADlC;AAELC,IAAAA,OAFK;AAGLC,IAAAA,KAHK;AAILV,IAAAA,YAJK;AAKL2B,IAAAA,cALK;AAMLD,IAAAA,mBANK;AAOLV,IAAAA,eAPK;AAQLd,IAAAA,WARK;AASLE,IAAAA,YATK;AAULmB,IAAAA,gBAVK;AAWLH,IAAAA;AAXK,GAAP;AAaD,CAtED;;GAAMtB,c;UACmBJ,Q,EAenBD,Q,EAMmDD,W;;;AAkDzD,eAAeM,cAAf","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport { ProductsResponse } from '../interfaces/products';\nimport { useOrder } from '../store/orderProvider';\nimport { useState } from 'react';\nimport { GET_PRODUCTS } from '../graphql/queries/getProductQuery';\nimport { ADD_ITEM_TO_ORDER } from '../graphql/mutation/addOrderMutation';\n\nconst useProductList = () => {\n  const { addToOrder } = useOrder();\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 6;\n\n  const {\n    data = {\n      products: {\n        totalItems: 0,\n        items: [],\n      },\n    },\n    loading,\n    error,\n  } = useQuery<ProductsResponse>(GET_PRODUCTS, {\n    variables: {\n      options: { skip: (currentPage - 1) * itemsPerPage, take: itemsPerPage },\n    },\n  });\n\n  const [addItemToOrder, { loading: MutationLoading }] = useMutation(\n    ADD_ITEM_TO_ORDER,\n    {\n      refetchQueries: [\n        {\n          query: GET_PRODUCTS,\n        },\n      ],\n      onCompleted: (data) => {\n        addToOrder(data?.addItemToOrder);\n      },\n    }\n  );\n\n  const totalPages = Math.ceil(data?.products?.totalItems / itemsPerPage);\n\n  const handleChangePage = (\n    event: React.ChangeEvent<unknown>,\n    page: number\n  ): void => {\n    setCurrentPage(page);\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const handleBuyClick = (productId: string) => {\n    addItemToOrder({\n      variables: { productVariantId: productId, quantity: 1 },\n    }).catch((error) => {\n      console.log(error, 'error in addItemToOrder');\n      setSnackbarOpen(true);\n    });\n  };\n  return {\n    productsList: data?.products?.items ?? [],\n    loading,\n    error,\n    snackbarOpen,\n    handleBuyClick,\n    handleSnackbarClose,\n    MutationLoading,\n    currentPage,\n    itemsPerPage,\n    handleChangePage,\n    totalPages,\n  };\n};\n\nexport default useProductList;\n"]},"metadata":{},"sourceType":"module"}