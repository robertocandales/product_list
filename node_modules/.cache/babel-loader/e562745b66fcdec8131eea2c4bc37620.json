{"ast":null,"code":"var _jsxFileName = \"/Users/robertocandales/Documents/Santex/challenge/santex-fe-challenge-basic (1)/src/store/orderProvider.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext } from 'react';\nimport useStateWithStorage from '../hooks/useStateWithStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create the context\nconst OrderContext = /*#__PURE__*/createContext({\n  orderItems: [],\n  subTotal: 0,\n  addToOrder: () => {}\n});\nexport const useOrder = () => {\n  _s();\n\n  return useContext(OrderContext);\n};\n\n_s(useOrder, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const OrderProvider = ({\n  children\n}) => {\n  _s2();\n\n  //  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);\n  //  const [subTotal, setSubtotal] = useState<number>(0);\n  const [orderItems, setOrderItems] = useStateWithStorage('orderItems', []);\n  const [subTotal, setSubtotal] = useStateWithStorage('subTotal', 0);\n\n  const calculateSubtotal = items => {\n    return items.reduce((total, item) => total + item.subTotal, 0);\n  };\n\n  const addToOrder = item => {\n    setOrderItems([...orderItems, item]);\n    setSubtotal(calculateSubtotal([...orderItems, item]));\n  };\n\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: {\n      orderItems,\n      subTotal,\n      addToOrder\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(OrderProvider, \"2M/+Sw3qsEEtv7DBby+id8n8FHI=\", false, function () {\n  return [useStateWithStorage, useStateWithStorage];\n});\n\n_c = OrderProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"sources":["/Users/robertocandales/Documents/Santex/challenge/santex-fe-challenge-basic (1)/src/store/orderProvider.tsx"],"names":["React","createContext","useContext","useStateWithStorage","OrderContext","orderItems","subTotal","addToOrder","useOrder","OrderProvider","children","setOrderItems","setSubtotal","calculateSubtotal","items","reduce","total","item"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;;AAcA;AACA,MAAMC,YAAY,gBAAGH,aAAa,CAAmB;AACnDI,EAAAA,UAAU,EAAE,EADuC;AAEnDC,EAAAA,QAAQ,EAAE,CAFyC;AAGnDC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAH+B,CAAnB,CAAlC;AAMA,OAAO,MAAMC,QAAQ,GAAG;AAAA;;AAAA,SAAMN,UAAU,CAACE,YAAD,CAAhB;AAAA,CAAjB;;GAAMI,Q;;AAEb,OAAO,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACvD;AACA;AACA,QAAM,CAACL,UAAD,EAAaM,aAAb,IAA8BR,mBAAmB,CACrD,YADqD,EAErD,EAFqD,CAAvD;AAIA,QAAM,CAACG,QAAD,EAAWM,WAAX,IAA0BT,mBAAmB,CAAS,UAAT,EAAqB,CAArB,CAAnD;;AAEA,QAAMU,iBAAiB,GAAIC,KAAD,IAAwB;AAChD,WAAOA,KAAK,CAACC,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiBD,KAAK,GAAGC,IAAI,CAACX,QAA3C,EAAqD,CAArD,CAAP;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAIU,IAAD,IAAqB;AACtCN,IAAAA,aAAa,CAAC,CAAC,GAAGN,UAAJ,EAAgBY,IAAhB,CAAD,CAAb;AACAL,IAAAA,WAAW,CAACC,iBAAiB,CAAC,CAAC,GAAGR,UAAJ,EAAgBY,IAAhB,CAAD,CAAlB,CAAX;AACD,GAHD;;AAKA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEZ,MAAAA,UAAF;AAAcC,MAAAA,QAAd;AAAwBC,MAAAA;AAAxB,KAA9B;AAAA,cACGG;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvBM;;IAAMD,a;UAGyBN,mB,EAIJA,mB;;;KAPrBM,a","sourcesContent":["import React, { createContext, useContext } from 'react';\nimport useStateWithStorage from '../hooks/useStateWithStorage';\n\ninterface OrderItem {\n  id: string;\n  subTotal: number;\n  total: number;\n}\n\ninterface OrderContextType {\n  orderItems: OrderItem[];\n  subTotal: number;\n  addToOrder: (item: OrderItem) => void;\n}\n\n// Create the context\nconst OrderContext = createContext<OrderContextType>({\n  orderItems: [],\n  subTotal: 0,\n  addToOrder: () => {},\n});\n\nexport const useOrder = () => useContext(OrderContext);\n\nexport const OrderProvider: React.FC = ({ children }) => {\n  //  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);\n  //  const [subTotal, setSubtotal] = useState<number>(0);\n  const [orderItems, setOrderItems] = useStateWithStorage<OrderItem[]>(\n    'orderItems',\n    []\n  );\n  const [subTotal, setSubtotal] = useStateWithStorage<number>('subTotal', 0);\n\n  const calculateSubtotal = (items: OrderItem[]) => {\n    return items.reduce((total, item) => total + item.subTotal, 0);\n  };\n\n  const addToOrder = (item: OrderItem) => {\n    setOrderItems([...orderItems, item]);\n    setSubtotal(calculateSubtotal([...orderItems, item]));\n  };\n\n  return (\n    <OrderContext.Provider value={{ orderItems, subTotal, addToOrder }}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}